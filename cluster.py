# -*- coding: utf-8 -*-
"""clusteripynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mNAdsb40tIS3mP0Kr01QGqMoyh1Namvu
"""

import pandas as pd
import streamlit as st
import matplotlib.pyplot as plt
import matplotlib.cm as cm

st.set_page_config(layout="wide")

# Load clustered data
@st.cache_data
def load_data():
    return pd.read_csv("merged_clean_with_clusters.csv")

df = load_data()
df = df.dropna(subset=["PhecodeCategory", "PhecodeString", "ICD", "dx name"])

# Cluster summaries
cluster_profiles = {
    0: "Cluster 0: Anxiety + somatic subtype – internalizing symptoms, vague complaints",
    1: "Cluster 1: Classic JFM – fibromyalgia, hypermobility, chronic pain",
    2: "Cluster 2: GI/autonomic subtype – abdominal pain, nausea, migraine"
}

# Filters
st.title("JFM Drilldown Explorer with Clusters")

col1, col2, col3 = st.columns(3)

# Cluster selector
cluster_sel = col1.selectbox("Select Cluster", ["All"] + sorted(df["cluster"].unique()))
if cluster_sel != "All":
    df = df[df["cluster"] == int(cluster_sel)]
    st.info(cluster_profiles[int(cluster_sel)])

# Category selector
category = col2.selectbox("Select Category", ["All"] + sorted(df["PhecodeCategory"].unique()))
if category != "All":
    df = df[df["PhecodeCategory"] == category]

# Phecode selector
phecode = col3.selectbox("Select Phecode", ["All"] + sorted(df["PhecodeString"].unique()))
if phecode != "All":
    df = df[df["PhecodeString"] == phecode]

# Level decision
if category == "All":
    level = "PhecodeCategory"
elif phecode == "All":
    level = "PhecodeString"
else:
    level = "ICD + dx name"
    df["ICD + dx name"] = df["ICD"] + " — " + df["dx name"]

# Top N
top_n = st.slider("Top N Results", 5, 50, 20)

# Chart
st.markdown(f"### Frequency by **{level}**")
data = df[level].value_counts().head(top_n)

if data.empty:
    st.warning("No data for this selection.")
else:
    st.write(f"Total Count: **{int(data.sum())}**")

    fig, ax = plt.subplots(figsize=(10, 5))
    colors = cm.viridis(data.values / max(data.values))
    bars = ax.barh(data.index, data.values, color=colors)
    ax.set_xlabel("Frequency")
    ax.set_ylabel(level)
    ax.set_title(f"Top {top_n} Frequencies")

    for bar in bars:
        width = bar.get_width()
        ax.text(width + 1, bar.get_y() + bar.get_height() / 2, str(int(width)), va='center')

    ax.invert_yaxis()
    st.pyplot(fig)